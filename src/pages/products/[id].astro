---
import { getCollection, getEntry } from "astro:content";
import { removeFileExtension } from "../../utils/general";

import Layout from "../../layouts/Layout.astro";
import ImageGallery from "../../components/vue/ImageGallery.vue";
import Button from "../../components/Button.astro";
import AddToCartButton from "../../components/vue/AddToCartButton.vue"; // Import the new component
import { Image } from "astro:assets";

// 1. Generate a static page for every product using its id (filename without extension)
export async function getStaticPaths() {
    const products = await getCollection(
        "products",
        ({ data }) => data.draft === false,
    );
    return products.map((product) => ({
        params: { id: removeFileExtension(product.id) }, // Use the entry id (filename)
        props: { productId: removeFileExtension(product.id) }, // Pass id to fetch in component
    }));
}

// 2. Get the product ID from props and fetch the full entry
const { productId } = Astro.props; // productId is '1' (example)

const product = await getEntry("products", productId); // Fetches entry using '1'

if (!product) {
    // Optional: Handle case where product is not found (e.g., return a 404)
    return Astro.redirect("/404");
}

// Prepare product data for the cart, using the string ID from the prop (without extension)
const productDataForCart = {
    id: productId, // Use the extension-less productId passed via props
    name: product.data.name,
    thumbnail: product.data.thumbnail.src,
};

const { Content } = await product.render();

// Prepare images for the gallery component
// Ensure the 'src' passed is the string URL from the processed image object
const galleryImages = [
    {
        src: product.data.thumbnail.src, // Access the nested src string
        alt: product.data.thumbnail.alt ?? `Thumbnail for ${product.data.name}`,
        description: product.data.thumbnail.description,
    },
    ...(product.data.images?.map((img) => ({
        src: img.src, // Access the nested src string
        alt: img.alt ?? `Image for ${product.data.name}`,
        description: img.description,
    })) ?? []),
];

// Fetch category details if needed (optional, depends on display requirements)
const category = await getEntry("categories", product.data.category); // Fetch category entry if needed

// Placeholder for related products logic
const relatedProducts = []; // Replace with actual logic to find related products

// Placeholder for reviews logic
const reviews = []; // Replace with actual logic to fetch reviews
---

<Layout title={product.data.name}>
    <div class="bg-gradient-to-br from-blue-200 via-transparent to-blue-200">
        <section class="py-16 px-4 md:px-8">
            <div class="container mx-auto max-w-6xl bg-white rounded-lg shadow-md p-6 md:p-8">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-12">
                    <!-- Image Gallery Column -->
                    <div>
                        <ImageGallery client:load images={galleryImages} />
                    </div>
    
                    <!-- Product Details Column -->
                    <div class="flex flex-col justify-center">
                        <!-- Optional: Breadcrumbs or Category Link -->
                        <!-- <a href={`/categories/${product.data.category.slug}`} class="text-sm text-primary-600 hover:underline mb-2">
                            {category?.data.name ?? 'Category'}
                        </a> -->
                        <h1
                            class="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 text-gray-800"
                        >
                            {product.data.name}
                        </h1>
    
                        <!-- SKU/Product Code -->
                        {
                            product.data.sku && (
                                <p class="text-sm text-gray-500 mb-6">
                                    SKU: {product.data.sku}
                                </p>
                            )
                        }
    
                        <!-- Product Properties/Features -->
                        <div class="mb-6">
                            <h3 class="text-xl font-semibold mb-3 text-gray-700">
                                Category:
                            </h3>
                            <span
                                class="text-sm bg-primary-100 text-primary-700 px-3 py-2 rounded-full hover:underline"
                                ><a
                                    href={`/products?category=${category?.slug}`}
                                    >{category?.data.name}</a
                                ></span
                            >
                        </div>
    
                        <!-- Call to Action -->
                        <div
                            class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-8"
                        >
                            <AddToCartButton client:load product={productDataForCart} />
                            
                            <Button
                                href="/products"
                                variant="secondary"
                            >
                                Back to All Products
                            </Button>
                        </div>
    
                        <!-- Markdown Content Area (Product Description) -->
                        <div id="content" class="mb-8 text-gray-700">
                            <Content />
                        </div>
    
                        <!-- Social Sharing Placeholder -->
                        <div class="mb-8">
                            <h3 class="text-lg font-semibold mb-2 text-gray-700">
                                Share:
                            </h3>
                            <div class="flex space-x-3">
                                <a
                                    href="#"
                                    aria-label="Share on Facebook"
                                    class="text-gray-500 hover:text-blue-600 transition-colors"
                                >
                                    <!-- Placeholder: Add SVG icon --> F
                                </a>
                                <a
                                    href="#"
                                    aria-label="Share on Twitter"
                                    class="text-gray-500 hover:text-sky-500 transition-colors"
                                >
                                    <!-- Placeholder: Add SVG icon --> T
                                </a>
                                <a
                                    href="#"
                                    aria-label="Share on LinkedIn"
                                    class="text-gray-500 hover:text-blue-700 transition-colors"
                                >
                                    <!-- Placeholder: Add SVG icon --> L
                                </a>
                            </div>
                        </div>
    
                        <!-- Divider -->
                        <hr class="my-8 border-gray-300" />
    
                        <!-- Product Specifications -->
                        {
                            product.data.properties &&
                                product.data.properties.length > 0 && (
                                    <div class="mb-8">
                                        <h3 class="text-xl font-semibold mb-3 text-gray-700">
                                            Properties:
                                        </h3>
                                        <ul class="list-disc list-inside space-y-1 text-gray-600">
                                            {product.data.properties.map((prop) => (
                                                <li>{prop}</li>
                                            ))}
                                        </ul>
                                    </div>
                                )
                        }
                    </div>
                </div>
    
                <!-- Customer Reviews Section Placeholder -->
                <div class="mt-16">
                    <h2 class="text-2xl font-bold mb-6 text-gray-800">
                        Customer Reviews
                    </h2>
                    {
                        reviews.length > 0 ? (
                            <div class="space-y-4">
                                {/* Map through actual reviews here */}
                                <p class="text-gray-600">
                                    Review content goes here...
                                </p>
                            </div>
                        ) : (
                            <p class="text-gray-500 italic">No reviews yet.</p>
                        )
                    }
                </div>
    
                <!-- Related Products Section Placeholder -->
                <div class="mt-16">
                    <h2 class="text-2xl font-bold mb-6 text-gray-800">
                        Related Products
                    </h2>
                    {
                        relatedProducts.length > 0 ? (
                            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                                {/* Map through related products and display ProductCard components */}
                                <p class="text-gray-600">
                                    Related product cards go here...
                                </p>
                            </div>
                        ) : (
                            <p class="text-gray-500 italic">
                                No related products found.
                            </p>
                        )
                    }
                </div>
            </div>
        </section>
    </div>
</Layout>

<style>
    #content {
        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
            font-size: revert;
            font-weight: revert;
        }

        blockquote,
        dl,
        dd,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        hr,
        figure,
        p,
        pre {
            margin: revert;
        }

        ol,
        ul,
        menu {
            list-style: revert;
            margin: revert;
            padding: revert;
        }

        a {
            color: inherit;
            text-decoration: revert;
        }

        hr {
            height: revert;
            color: revert;
            border-top-width: revert;
            border-color: revert;
        }

        table {
            width: 100%;
            border-collapse: separate; /* Use separate for rounded corners */
            border-spacing: 0; /* Remove spacing between cells */
            margin-top: 1.5em; /* Increased margin */
            margin-bottom: 1.5em;
            border: 1px solid #e5e7eb; /* Softer border (gray-200) */
            border-radius: 0.5rem; /* Rounded corners (like rounded-lg) */
            font-size: 0.9em;
            overflow: hidden; /* Clip content to rounded corners */
            box-shadow:
                0 1px 3px 0 rgb(0 0 0 / 0.1),
                0 1px 2px -1px rgb(0 0 0 / 0.1); /* Subtle shadow (shadow-sm) */

            /* Style table header cells */
            th {
                background-color: #f9fafb; /* Very light gray (gray-50) */
                border-bottom: 1px solid #e5e7eb; /* Border between header and body */
                padding: 0.75rem 1rem; /* Adjusted padding */
                text-align: left;
                font-weight: 600;
                color: #374151; /* Darker gray text (gray-700) */
                /* Remove individual cell borders if using table border */
                border-left: none;
                border-right: none;
                border-top: none;
            }
            /* Add right border only to non-last header cells */
            th:not(:last-child) {
                border-right: 1px solid #e5e7eb;
            }

            /* Style table data cells */
            td {
                border-top: 1px solid #e5e7eb; /* Horizontal lines between rows */
                padding: 0.75rem 1rem;
                vertical-align: top;
                color: #4b5563; /* Slightly lighter gray text (gray-600) */
                /* Remove individual cell borders if using row borders */
                border-left: none;
                border-right: none;
                border-bottom: none;
            }
            /* Add right border only to non-last data cells */
            td:not(:last-child) {
                border-right: 1px solid #e5e7eb;
            }

            /* Zebra striping for table body rows */
            tbody tr:nth-child(even) {
                background-color: #f9fafb; /* Use the same light gray as header for subtle striping */
            }

            /* Hover effect for rows - use a primary color tint */
            tbody tr:hover {
                background-color: #eff6ff; /* Light blue tint (blue-50 / primary-50) */
            }

            /* Ensure first row cells don't have top border if header exists */
            thead + tbody tr:first-child td {
                border-top: none;
            }
            /* Ensure header cells in the first row have rounded top corners */
            thead tr:first-child th:first-child {
                border-top-left-radius: 0.5rem;
            }
            thead tr:first-child th:last-child {
                border-top-right-radius: 0.5rem;
            }

            /* Ensure cells in the last row have rounded bottom corners */
            tbody tr:last-child td:first-child {
                border-bottom-left-radius: 0.5rem;
            }
            tbody tr:last-child td:last-child {
                border-bottom-right-radius: 0.5rem;
            }
        }
    }
</style>

---
import { getCollection, getEntry, type CollectionEntry } from "astro:content";
import { removeFileExtension } from "../../utils/general";

import Layout from "../../layouts/Layout.astro";
import ImageGallery from "../../components/vue/ImageGallery.vue";
import Button from "../../components/Button.astro";
import AddToCartButton from "../../components/vue/AddToCartButton.vue";
import ProductVariationSelector from "../../components/vue/ProductVariationSelector.vue"; // Import the new component
import { Image } from "astro:assets";

// 1. Generate static paths
export async function getStaticPaths() {
    const products = await getCollection(
        "products",
        ({ data }) => data.draft === false,
    );
    return products.map((product) => ({
        params: { id: product.slug },
        props: { productId: product.slug },
    }));
}

// 2. Get product ID and fetch product entry
const { productId } = Astro.props;
const product = await getEntry("products", productId);

if (!product) {
    return Astro.redirect("/404");
}

// 3. Fetch non-draft variations related to this product
const allVariations = await getCollection(
    "variations",
    ({ data }) => data.draft === false, // Add filter for variation draft status
);
const productVariationsEntries = allVariations.filter(
    (variation) => variation.data.product === productId,
);

// 4. Prepare data for components
const productDataForCart = {
    id: productId,
    name: product.data.name,
    thumbnail: product.data.thumbnail.src,
};

// Prepare images for gallery
const galleryImages = [
    {
        src: product.data.thumbnail.src,
        alt: product.data.thumbnail.alt ?? `Thumbnail for ${product.data.name}`,
        description: product.data.thumbnail.description,
    },
    ...(product.data.images?.map((img) => ({
        src: img.src,
        alt: img.alt ?? `Image for ${product.data.name}`,
        description: img.description,
    })) ?? []),
];

// Fetch category details
const category = await getEntry("categories", product.data.category);

// Placeholder for related products and reviews
const relatedProducts = [];
const reviews = [];

// Prepare variation data AND render their content components
const variationsData = await Promise.all(productVariationsEntries.map(async (variation) => {
    const { Content: VariationContent } = await variation.render();
    return {
        id: removeFileExtension(variation.id),
        name: variation.data.name,
        properties: variation.data.properties,
        ContentComponent: VariationContent, // Keep this for rendering description
    };
}));

// Prepare a simplified version for the button prop (only id and name)
const variationsForButton = variationsData.map(v => ({ id: v.id, name: v.name }));

// Determine initial variation (e.g., the first one)
const initialVariation = variationsData.length > 0 ? variationsData[0] : null;

---

<Layout title={product.data.name}>
    <div class="bg-gradient-to-br from-blue-200 via-transparent to-blue-200">
        <section class="py-16 px-4 md:px-8">
            <div class="container mx-auto max-w-6xl bg-white rounded-lg shadow-md p-6 md:p-8">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-12">
                    <!-- Image Gallery Column -->
                    <div>
                        <ImageGallery client:load images={galleryImages} />
                    </div>

                    <!-- Product Details Column -->
                    <div class="flex flex-col justify-center">
                        <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 text-gray-800">
                            {product.data.name}
                        </h1>

                        <!-- Variation Selection -->
                        {variationsData.length > 0 && (
                            <div id="variation-selector-wrapper" class="mb-6"> {/* Added wrapper ID */}
                                <ProductVariationSelector 
                                    client:load
                                    variations={variationsData}
                                    initialVariationId={initialVariation?.id}
                                />
                            </div>
                        )}

                        <!-- Category display -->
                        <div class="mb-6">
                            <h3 class="text-xl font-semibold mb-3 text-gray-700">
                                Category:
                            </h3>
                            <span
                                class="text-sm bg-primary-100 text-primary-700 px-3 py-2 rounded-full hover:underline"
                                ><a
                                    href={`/products?category=${category?.slug}`}
                                    >{category?.data.name}</a
                                ></span
                            >
                        </div>

                        <!-- Call to Action - Pass initial variation data AND all variations -->
                        <div id="add-to-cart-wrapper" class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-8">
                            <AddToCartButton 
                                client:load 
                                product={productDataForCart}
                                initialVariationId={initialVariation?.id}
                                initialVariationName={initialVariation?.name}
                                variations={variationsForButton}
                            />
                            <Button href="/products" variant="secondary">
                                Back to All Products
                            </Button>
                        </div>

                        <!-- Variation Description Area - Render all, hide/show with JS -->
                        <div id="variation-description-container" class="mb-8 text-gray-700 relative">
                             {variationsData.map((variation, index) => {
                                const { ContentComponent } = variation;
                                const isInitial = initialVariation?.id === variation.id;
                                return (
                                    <div 
                                        id={`variation-desc-${variation.id}`} 
                                        class:list={["variation-content prose max-w-none", { 'hidden': !isInitial }]}
                                    >
                                        <ContentComponent />
                                    </div>
                                );
                             })}
                             {!initialVariation && (
                                <div id="no-variation-content">
                                    <p>Product details will appear here.</p> 
                                </div>
                             )}
                        </div>

                        <!-- Variation Properties Area -->
                        <div id="variation-properties" class="mb-8">
                            <h3 class="text-xl font-semibold mb-3 text-gray-700">
                                Properties:
                            </h3>
                            {initialVariation && initialVariation.properties.length > 0 ? (
                                <ul class="list-disc list-inside space-y-1 text-gray-600">
                                    {initialVariation.properties.map((prop) => (
                                        <li>{prop}</li>
                                    ))}
                                </ul>
                            ) : productVariationsEntries.length > 0 ? (
                                 <p class="text-gray-500 italic">Select a variation to see properties.</p>
                            ) : (
                                 <p class="text-gray-500 italic">No specific properties listed.</p>
                            )
                           }
                        </div>

                        <!-- Social Sharing -->
                         <div class="mb-8">
                            <h3 class="text-lg font-semibold mb-2 text-gray-700">
                                Share:
                            </h3>
                            <div class="flex space-x-3">
                                <a
                                    href="#"
                                    aria-label="Share on Facebook"
                                    class="text-gray-500 hover:text-blue-600 transition-colors"
                                > F </a>
                                <a
                                    href="#"
                                    aria-label="Share on Twitter"
                                    class="text-gray-500 hover:text-sky-500 transition-colors"
                                > T </a>
                                <a
                                    href="#"
                                    aria-label="Share on LinkedIn"
                                    class="text-gray-500 hover:text-blue-700 transition-colors"
                                > L </a>
                            </div>
                        </div>
    
                        <!-- Divider -->
                        <hr class="my-8 border-gray-300" />
                    </div>
                </div>
    
                <!-- Customer Reviews Section -->
                 <div class="mt-16">
                    <h2 class="text-2xl font-bold mb-6 text-gray-800">
                        Customer Reviews
                    </h2>
                    {
                        reviews.length > 0 ? (
                            <div class="space-y-4">
                                <p class="text-gray-600"> Review content goes here... </p>
                            </div>
                        ) : ( <p class="text-gray-500 italic">No reviews yet.</p> )
                    }
                </div>
    
                <!-- Related Products Section -->
                <div class="mt-16">
                    <h2 class="text-2xl font-bold mb-6 text-gray-800">
                        Related Products
                    </h2>
                    {
                        relatedProducts.length > 0 ? (
                            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                                <p class="text-gray-600"> Related product cards go here... </p>
                            </div>
                        ) : ( <p class="text-gray-500 italic"> No related products found. </p> )
                    }
                </div>
            </div>
        </section>
    </div>
</Layout>

<script define:vars={{ variationsData }}> // Keep variationsData here for description/properties update
    // Client-side script to handle variation changes triggered by the Vue component
    const descriptionContainer = document.getElementById('variation-description-container');
    const propertiesElement = document.getElementById('variation-properties');

    function updateVariationDetails(variationId) {
        // Find the data for the selected variation using the ID
        const selectedVariation = variationsData.find(v => v.id === variationId);
        
        if (!selectedVariation || !descriptionContainer || !propertiesElement) {
            console.warn(`Could not find variation data or elements for ID: ${variationId}`);
            return;
        }

        console.log('Updating description and properties for variation ID:', variationId);

        // Update Description Visibility
        const allVariationContents = descriptionContainer.querySelectorAll('.variation-content');
        allVariationContents.forEach(content => {
            if (content.id === `variation-desc-${variationId}`) {
                content.classList.remove('hidden');
            } else {
                content.classList.add('hidden');
            }
        });
        
        // Hide the fallback message if it exists and a variation is selected
        const noVariationContent = descriptionContainer.querySelector('#no-variation-content');
        if (noVariationContent) {
            noVariationContent.classList.add('hidden');
        }

        // Update Properties
        const propertiesList = selectedVariation.properties.length > 0
            ? `<ul class="list-disc list-inside space-y-1 text-gray-600">${selectedVariation.properties.map(prop => `<li>${prop}</li>`).join('')}</ul>`
            : '<p class="text-gray-500 italic">No specific properties for this variation.</p>';
        
        propertiesElement.innerHTML = `
            <h3 class="text-xl font-semibold mb-3 text-gray-700">
                Properties:
            </h3>
            ${propertiesList}
        `;
    }

    // Listen for the custom event from the ProductVariationSelector component
    window.addEventListener('variation-selected', (event) => {
        // The variation ID is in event.detail
        console.log('Astro script caught variation-selected event:', event);
        const selectedId = event.detail;
        if (selectedId) {
            updateVariationDetails(selectedId);
        } else {
             console.warn('Variation selected event received without detail (ID).');
             // Optionally handle the case where no variation is selected (e.g., show default state)
        }
    });
</script>

<style>
    .variation-content {
        color: #374151;
        line-height: 1.6;
    }
    .variation-content.prose p { margin-bottom: 1em; }
    .variation-content.prose ul,
    .variation-content.prose ol { margin-left: 1.5em; margin-bottom: 1em; }
    .variation-content.prose li { margin-bottom: 0.5em; }
    .variation-content.prose strong { font-weight: 600; }
    .variation-content.prose h1,
    .variation-content.prose h2,
    .variation-content.prose h3,
    .variation-content.prose h4,
    .variation-content.prose h5,
    .variation-content.prose h6 {
        font-size: revert;
        font-weight: revert;
        margin: revert;
    }
    .variation-content.prose blockquote,
    .variation-content.prose dl,
    .variation-content.prose dd,
    .variation-content.prose hr,
    .variation-content.prose figure,
    .variation-content.prose pre {
        margin: revert;
    }
    .variation-content.prose menu {
        list-style: revert;
        margin: revert;
        padding: revert;
    }
    .variation-content.prose a {
        color: inherit;
        text-decoration: revert;
    }
    .variation-content.prose hr {
        height: revert;
        color: revert;
        border-top-width: revert;
        border-color: revert;
    }
    .variation-content.prose table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-top: 1.5em;
        margin-bottom: 1.5em;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        font-size: 0.9em;
        overflow: hidden;
        box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    }
    .variation-content.prose th {
        background-color: #f9fafb;
        border-bottom: 1px solid #e5e7eb;
        padding: 0.75rem 1rem;
        text-align: left;
        font-weight: 600;
        color: #374151;
        border-left: none;
        border-right: none;
        border-top: none;
    }
    .variation-content.prose th:not(:last-child) { border-right: 1px solid #e5e7eb; }
    .variation-content.prose td {
        border-top: 1px solid #e5e7eb;
        padding: 0.75rem 1rem;
        vertical-align: top;
        color: #4b5563;
        border-left: none;
        border-right: none;
        border-bottom: none;
    }
    .variation-content.prose td:not(:last-child) { border-right: 1px solid #e5e7eb; }
    .variation-content.prose tbody tr:nth-child(even) { background-color: #f9fafb; }
    .variation-content.prose tbody tr:hover { background-color: #eff6ff; }
    .variation-content.prose thead + tbody tr:first-child td { border-top: none; }
    .variation-content.prose thead tr:first-child th:first-child { border-top-left-radius: 0.5rem; }
    .variation-content.prose thead tr:first-child th:last-child { border-top-right-radius: 0.5rem; }
    .variation-content.prose tbody tr:last-child td:first-child { border-bottom-left-radius: 0.5rem; }
    .variation-content.prose tbody tr:last-child td:last-child { border-bottom-right-radius: 0.5rem; }
</style>
